#!/usr/bin/env ruby

# [merge "bundler"]
#   name = Gemfile.lock merge driver
#   driver = bundler-merge %A %O %B

# Known sections:
# * GIT
# * PATH
# * GEM
# * PLATFORMS
# * DEPENDENCIES
# * BUNDLED WITH
# * RUBY VERSION

Section = Struct.new(:name, :text) do
  def key
    case name
    when "GIT", "PATH", "GEM"
      remote = text[/^  remote: (.+)$/, 1] || fail("remote missing")
      "#{name}:#{remote}"
    else
      name
    end
  end

  SECTION_ORDER = %W[GIT PATH GEM PLATFORMS DEPENDENCIES BUNDLED\ WITH RUBY\ VERSION]
  def sort_key
    [SECTION_ORDER.index(name), text[/^  remote: (.+)$/, 1]]
  end

  def self.build(name, internal)
    new(name, "#{name}\n#{internal}")
  end
end

class Lockfile
  attr_reader :sections, :path
  def initialize(path)
    @path = path
    @sections = []
    section = nil
    File.foreach(path) do |line|
      if line == "\n"
        section = nil
      elsif line =~ /\A[A-Z]/
        name = line.chomp
        section = Section.new(name, line.dup)
        @sections << section
      else
        section.text << line
      end
    end
  end
end

class Diff3
  Chunk = Struct.new(:o, :a, :b) do
    alias_method :original, :o

    def replace(regex)
      texts = to_a
      texts = texts.map(&:text) unless String === texts[0]
      matches = texts.map { |s| s.match(regex) }
      return nil unless matches.map{|m| [m.pre_match, m.post_match] }.uniq.size == 1
      extracted = matches.map { |m| m.match(1) }
      result = yield extracted
      text = texts[0].dup
      text[*matches[0].offset(1)] = result
      text
    end
  end

  def initialize(o, a, b)
    @chunks = Hash.new { |h, k| h[k] = Chunk.new }
    o.each { |s| @chunks[key(s)].o = s }
    a.each { |s| @chunks[key(s)].a = s }
    b.each { |s| @chunks[key(s)].b = s }
  end

  def key(x)
    x
  end

  def merge(x)
    fail("conflict: #{x.inspect}")
  end

  def result
    @chunks.values.map do |chunk|
      if chunk.original == chunk.a
        # only changed by B (or no change at all)
        chunk.b
      elsif chunk.original == chunk.b
        # only changed by A
        chunk.a
      elsif chunk.a == chunk.b
        # both changed in same way
        chunk.a
      else
        # Ah dang it's a real merge
        merge(chunk)
      end
    end.compact
  end
end

class DependencyDiff3 < Diff3
  def key(dep)
    dep[/  ([^ !]+)/, 1]
  end
end

class GemDiff3 < Diff3
  def key(dep)
    dep.match(/    ([^ !]+) \([0-9a-z\.]+(-[a-z0-9_\-]*)?\)/i).captures
  end
end

class SubdepDiff3 < Diff3
  def key(dep)
    dep[/      ([^ !]+)/, 1]
  end
end

# Like GemDiff3 but also allow merging dependencies
class PathDiff3 < Diff3
  def key(dep)
    dep[/    ([^ !]+)/, 1]
  end

  def merge(chunk)
    super unless chunk.all?
    chunk.replace(/\A    [^\n]+\n(.+)\z/m) do |deps|
      result = SubdepDiff3.new(*deps.map(&:lines)).result
      result.sort.join("")
    end
  end
end

class LockfileDiff3 < Diff3
  def key(section)
    section.key
  end

  def merge(chunk)
    fail("conflict") unless chunk.o

    name = chunk.o.name

    if false
    elsif name == "DEPENDENCIES"
      diff3 = DependencyDiff3.new(*chunk.to_a.map do |s|
        s.text.lines[1..]
      end)
      Section.build(name, diff3.result.sort.join)
    elsif name == "GEM"
      gems = chunk.to_a.map do |s|
        specs = s.text[/^  specs:\n((?:    .+\n)*)/, 1]
        specs = specs.split(/^(?=    [^ ])/)
      end
      diff3 = GemDiff3.new(*gems)
      prefix = chunk.o.text[/\A.+\n  specs:\n/m]
      text = "#{prefix}#{diff3.result.sort.join}"
      Section.new(name, text)
    elsif name == "BUNDLED WITH"
      # Just take ours
      chunk.a
    elsif name == "PATH"
      text = chunk.replace(/^  specs:\n((?:    .+\n)*)/) do |s|
        gems = s.map do |specs|
          specs.split(/^(?=    [^ ])/)
        end
        diff3 = PathDiff3.new(*gems)
        diff3.result.join("")
      end
      Section.new(name, text)
    else
      fail("merge unimplemented for #{name.inspect}")
    end
  end
end

argv = ARGV.dup
stdout = !!argv.delete("-p")

if argv.size != 3
  puts "Usage: #$0 %A %O %B"
  exit 1
end

local, base, remote = files = argv
diff3 = LockfileDiff3.new(*[base, local, remote].map { |f| Lockfile.new(f).sections })
result = diff3.result.sort_by(&:sort_key).map(&:text).join("\n")
output = stdout ? STDOUT : File.open(local, "w")
output.puts result
